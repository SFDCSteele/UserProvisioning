//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//

public class ADUpdateGroupService {
    
    public String GroupName {get;set;} 
    public String EmailAddress {get;set;} 
    public String FederationId {get;set;} 
    public String SECID {get;set;} 
    public String FirstName {get;set;} 
    public String LastName {get;set;} 
    public String ParentADGroup {get;set;} 
    public String Status {get;set;} 
    
    public ADUpdateGroupService(JSONParser parser) {
        while (parser.nextToken() != System.JSONToken.END_OBJECT) {
            if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                String text = parser.getText();
                if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                    if (text == 'GroupName') {
                        GroupName = parser.getText();
                    } else if (text == 'EmailAddress') {
                        EmailAddress = parser.getText();
                    } else if (text == 'FederationId') {
                        FederationId = parser.getText();
                    } else if (text == 'SECID') {
                        SECID = parser.getText();
                    } else if (text == 'FirstName') {
                        FirstName = parser.getText();
                    } else if (text == 'LastName') {
                        LastName = parser.getText();
                    } else if (text == 'ParentADGroup') {
                        ParentADGroup = parser.getText();
                    } else if (text == 'Status') {
                        Status = parser.getText();
                    } else {
                        System.debug(LoggingLevel.WARN, 'ADUpdateGroupService consuming unrecognized property: '+text);
                        consumeObject(parser);
                    }
                }
            }
        }
    }
    
    
    public static ADUpdateGroupService parse(String json) {
        System.JSONParser parser = System.JSON.createParser(json);
        return new ADUpdateGroupService(parser);
    }
    
    public static void consumeObject(System.JSONParser parser) {
        Integer depth = 0;
        do {
            System.JSONToken curr = parser.getCurrentToken();
            if (curr == System.JSONToken.START_OBJECT || 
                curr == System.JSONToken.START_ARRAY) {
                    depth++;
                } else if (curr == System.JSONToken.END_OBJECT ||
                           curr == System.JSONToken.END_ARRAY) {
                               depth--;
                           }
        } while (depth > 0 && parser.nextToken() != null);
    }
    
    public static String execute (String messageRecived ) {
        ADUpdateGroupService r = ADUpdateGroupService.parse(messageRecived);
        String returnMessage = 'Success';
        
        System.debug('ADUpdateGroupService:GroupName: '+r.GroupName);
        System.debug('ADUpdateGroupService:EmailAddress: '+r.EmailAddress);
        System.debug('ADUpdateGroupService:FederationId: '+r.FederationId);
        System.debug('ADUpdateGroupService:SECID: '+r.SECID);
        System.debug('ADUpdateGroupService:FirstName: '+r.FirstName);
        System.debug('ADUpdateGroupService:LastName: '+r.LastName);
        System.debug('ADUpdateGroupService:ParentADGroup: '+r.ParentADGroup);
        System.debug('ADUpdateGroupService:Status: '+r.Status);
        
        DTC_Application__c dtcApplication = new DTC_Application__c();
        DTC_Application_Level__c dtcApplicationLevel = new DTC_Application_Level__c();
        List<CF_Permission_Mapping__c> dtcApplicationLevelPermissions = new List<CF_Permission_Mapping__c>();

        dtcApplication = getDTCApplication(r.ParentADGroup);
        if ( dtcApplication.Id != null ) {
			dtcApplicationLevel = getDTCApplicationLevel(dtcApplication.Id,r.GroupName);
	        if ( dtcApplicationLevel.Id != null ) {
                dtcApplicationLevelPermissions = getApplicationLevelPermissions(dtcApplication.Id,dtcApplicationLevel.Id,'Destination');
		        if ( dtcApplicationLevelPermissions.size() > 0 ) {
                    createContact(r,dtcApplication,dtcApplicationLevel);
                }
            }
        }
        
        
        return returnMessage;
        
    }
    
    public static void createUser(List<Id> IdsToProcess) {

        Boolean bIsActive = true;
        String sLanguagelocalekey='en_US';
        String sTimezonesidkey='America/New_York';
        String sLocalesidkey='en_US';
        String sEmailencodingkey='UTF-8';
        
        List<User> newUsers = new List<User>();
        User newUser = new User();
        
        Contact cont = new Contact();
        Map<Id,Contact> contactMap = new Map<Id,Contact>();
        DTC_Application__c dtcApp  = new DTC_Application__c();
        Map<Id,DTC_Application__c> DTCApplicationMap = new Map<Id,DTC_Application__c>();
        DTC_Application_Level__c dtcAppLevel = new DTC_Application_Level__c();
        Map<Id,DTC_Application_Level__c> DTCApplicationLevelMap = new Map<Id,DTC_Application_Level__c>();
        List<CF_Permission_Mapping__c> permissions = new List<CF_Permission_Mapping__c>();
        Map<String,List<CF_Permission_Mapping__c>> hubPermissionsMap = new Map<String,List<CF_Permission_Mapping__c>>();
        Map<String,List<CF_Permission_Mapping__c>> destPermissionsMap = new Map<String,List<CF_Permission_Mapping__c>>();
        
        
        List<CF_Application_Access__c> appAccessList = [SELECT Id, Account__c, Approval_Status__c, Approved_Checkbox__c, DTC_Application__c, 
                                                    Contact__c, Inactive__c, DTC_Application_Level__c FROM CF_Application_Access__c where Id =: IdsToProcess];
        
        System.debug('600-10->>>>>>>>>>>>ADUpdateGroupService:createUser:records to process: '+appAccessList);
        for (CF_Application_Access__c appAccess : appAccessList ) {

	        System.debug('600-20->>>>>>>>>>>>ADUpdateGroupService:createUser:reading singular record: '+appAccess);
            if (contactMap.isEmpty() || contactMap.get(appAccess.Contact__c) == null ) {
                cont = getContact(appAccess.Contact__c);
                contactMap.put(appAccess.Contact__c,cont); 
            } 
	        System.debug('600-30->>>>>>>>>>>>ADUpdateGroupService:createUser:updated contactMap: '+contactMap);
            if (DTCApplicationMap.isEmpty() || DTCApplicationMap.get(appAccess.DTC_Application__c) == null ) {
                dtcApp = getDTCApplication(appAccess.DTC_Application__c);
                DTCApplicationMap.put(appAccess.DTC_Application__c,dtcApp); 
            }
	        System.debug('600-40->>>>>>>>>>>>ADUpdateGroupService:createUser:updated DTCApplicationMap: '+DTCApplicationMap);
            if (DTCApplicationLevelMap.isEmpty() || DTCApplicationLevelMap.get(appAccess.DTC_Application_Level__c) == null ) {
                dtcAppLevel = getDTCApplicationLevel(appAccess.DTC_Application_Level__c);
                DTCApplicationLevelMap.put(appAccess.DTC_Application_Level__c,dtcAppLevel); 
            }
	        System.debug('600-40->>>>>>>>>>>>ADUpdateGroupService:createUser:updated DTCApplicationLevelMap: '+DTCApplicationLevelMap);
            if (hubPermissionsMap.isEmpty() || hubPermissionsMap.get((appAccess.DTC_Application__c+'|'+appAccess.DTC_Application_Level__c+'|hub')) == null ) {
                permissions = getApplicationLevelPermissions(appAccess.DTC_Application__c,appAccess.DTC_Application_Level__c,'Hub');
                if ( permissions.size() > 0 ) {
	                hubPermissionsMap.put((appAccess.DTC_Application__c+'|'+appAccess.DTC_Application_Level__c+'|hub'),permissions); 
                } else {
			        System.debug('600-45->>>>>>>>>>>>ADUpdateGroupService:createUser:did not find any HUB permissions');
                }
            }
	        System.debug('600-50->>>>>>>>>>>>ADUpdateGroupService:createUser:updated hubPermissionsMap: '+hubPermissionsMap);
            if (destPermissionsMap.isEmpty() || destPermissionsMap.get((appAccess.DTC_Application__c+'|'+appAccess.DTC_Application_Level__c+'|dest')) == null ) {
                permissions = getApplicationLevelPermissions(appAccess.DTC_Application__c,appAccess.DTC_Application_Level__c,'Destination');
                if ( permissions.size() > 0 ) {
	                destPermissionsMap.put((appAccess.DTC_Application__c+'|'+appAccess.DTC_Application_Level__c+'|dest'),permissions); 
                } else {
			        System.debug('600-55->>>>>>>>>>>>ADUpdateGroupService:createUser:did not find any Destination permissions');
                }
            }
	        System.debug('600-60->>>>>>>>>>>>ADUpdateGroupService:createUser:updated destPermissionsMap: '+destPermissionsMap);

            
        }
                                                     
            
                                                     
			/* create user:

                newUsers.add(new User(username=appAccess.Federation_Id__c,firstname=appAccess.Contact__r.FirstName,lastname=Contact__r.LastName,email=Contact__r.Email,federationidentifier=Contact__r.LastName,
                alias=users.get(5),isactive=bIsActive,profileid=adminProfile.Id,languagelocalekey=sLanguagelocalekey,timezonesidkey=sTimezonesidkey,localesidkey=sLocalesidkey,emailencodingkey=sEmailencodingkey);

				userValues.add(new List<String>{'arevankar@mulesoft.com ','Amit',' Revankar','arevankar@mulesoft.com','arevankar@mulesoft.com','arev','true','00et0000000QGuGAAW','en_US','America/New_York','en_US','UTF-8'});
                userValues.add(new List<String>{'afelrice@salesforce.com','Andrew','Felrice','afelrice@salesforce.com','afelrice@salesforce.com','afeir','true','00et0000000QGuGAAW','en_US','America/New_York','en_US','UTF-8'});
                userValues.add(new List<String>{'bryan.broome@va.gov','Bryan','Broome','bryan.broome@va.gov','bryan.broome@va.gov','bbro','true','00et0000000QGuGAAW','en_US','America/New_York','en_US','UTF-8},'});
                userValues.add(new List<String>{'wsteele@salesforce.com','William','Steele','wsteele@salesforce.com','wsteele@salesforce.com','wstee','true','00et0000000QGuGAAW','en_US','America/New_York','en_US','UTF-8'});
                
                Integer cnt = 0;
                for ( List<String> users : userValues) {
                    System.debug('======================================================================');
                    //newUsers.add(new User(username=users.get(0),firstname=users.get(1),lastname=users.get(2),email=users.get(3),federationidentifier=users.get(4),alias=users.get(5),isactive=Boolean.valueOf(users.get(6)),profileid=adminProfile.Id,languagelocalekey=users.get(8),timezonesidkey=users.get(9),localesidkey=users.get(10),emailencodingkey='UTF-8'));
                    newUsers.add(new User(username=users.get(0),firstname=users.get(1),lastname=users.get(2),email=users.get(3),federationidentifier=users.get(4),alias=users.get(5),isactive=bIsActive,profileid=adminProfile.Id,languagelocalekey=sLanguagelocalekey,timezonesidkey=sTimezonesidkey,localesidkey=sLocalesidkey,emailencodingkey=sEmailencodingkey);
                }
                System.debug('======================================================================');
                System.debug('users to be added: '+newUsers);
                Insert newUsers;
			 */

        
    }
     
    private static DTC_Application_Level__c getDTCApplicationLevel (Id DTCApplicationLevelId) {
        DTC_Application_Level__c rtnDTCApplicationLevel = new DTC_Application_Level__c();
        try {
            rtnDTCApplicationLevel = [select Id,Name,Is_Active__c,
                                      Hub_Org_Role__c,Hub_Org_Profile__c,Hub_Org_License__c,
                                      Destination_Org_Role__c,Destination_Org_Profile__c,Destination_Org_License__c,
                                      Application_Level_User_Creation_Flow__c,Application_Level_User_Creation_Apex__c 
                                      FROM DTC_Application_Level__c where Id =: DTCApplicationLevelId];
        }
        catch (Exception e) {
            System.debug('Exception while looking for DTC Application: '+DTCApplicationLevelId+': '+e.getStackTraceString());
            rtnDTCApplicationLevel = null;
        }
        return rtnDTCApplicationLevel;
    }
   
    private static DTC_Application__c getDTCApplication (Id DTCApplicationId) {
        DTC_Application__c rtnDTCApplication = new DTC_Application__c();
        try {
            rtnDTCApplication = [select Id,Name,Application_Description__c,Org__c,Profile_ID__c, 
                                 Overall_User_Creation_Flow__c,Overall_User_Creation_Apex__c  
                                 FROM DTC_Application__c where Id =: DTCApplicationId];
        }
        catch (Exception e) {
            System.debug('Exception while looking for DTC Application: '+DTCApplicationId+': '+e.getStackTraceString());
            rtnDTCApplication = null;
        }
        return rtnDTCApplication;
    }
    
    private static Contact getContact (Id contactId) {
        Contact rtnContact = new Contact();
        try {
            rtnContact = [select Id,FirstName,LastName,Email,Federation_Id__c,SECID__c FROM Contact where Id =: contactId];
        }
        catch (Exception e) {
            System.debug('Exception while looking for contact: '+contactId+': '+e.getStackTraceString());
            rtnContact = null;
        }
        return rtnContact;
    }
    
    private static boolean createContact (ADUpdateGroupService grpEvent, DTC_Application__c dtcApplication, DTC_Application_Level__c dtcApplicationLevel) {
        
        boolean returnStatus = false;
        
        if ( !contactExists(grpEvent.SECID) && !applicationAccessExists(grpEvent.SECID,dtcApplication.Id,dtcApplicationLevel.Id) ) {

            /*
                System.debug('ADUpdateGroupService:GroupName: '+r.GroupName);
                System.debug('ADUpdateGroupService:EmailAddress: '+r.EmailAddress);
                System.debug('ADUpdateGroupService:FederationId: '+r.FederationId);
                System.debug('ADUpdateGroupService:SECID: '+r.SECID);
                System.debug('ADUpdateGroupService:FirstName: '+r.FirstName);
                System.debug('ADUpdateGroupService:LastName: '+r.LastName);
                System.debug('ADUpdateGroupService:ParentADGroup: '+r.ParentADGroup);
                System.debug('ADUpdateGroupService:Status: '+r.Status);
             */            
            try {
                Contact newContact = new Contact(AccountId=dtcApplication.Account__c,
                                                 Email=grpEvent.EmailAddress,Federation_Id__c=grpEvent.FederationId,SECID__c=grpEvent.SECID,
                                                 FirstName=grpEvent.FirstName,LastName=grpEvent.LastName,
                                                 Description='AUP Created Contact');
                insert newContact;
		        System.debug('400-10->>>>>>>>>>>>ADUpdateGroupService:contactExists:createContact: newContact: '+newContact);
                
                CF_Application_Access__c newAccess = new CF_Application_Access__c(Account__c=newContact.AccountId,
                                                                                  Approval_Status__c='Approved',Approved_Checkbox__c=true,
                                                                                  Contact__c=newContact.Id,
                                                                                  DTC_Application__c=dtcApplication.Id,DTC_Application_Level__c=dtcApplicationLevel.Id,
                                                                                  Email_Id__c=grpEvent.EmailAddress,Federation_Id__c=grpEvent.FederationId,Inactive__c=false,
                                                                                  First_Name__c=grpEvent.FirstName,Last_Name__c=grpEvent.LastName,
                                                                                  Notes__c='AUP Created Application Access');
                insert newAccess;
		        System.debug('400-20->>>>>>>>>>>>ADUpdateGroupService:contactExists:create Application Access: newAccess: '+newAccess);
                
                returnStatus = true;
                            
            }
            catch (Exception e) {
                System.debug('Exception(creating new contact and new Application Access record): '+e.getStackTraceString());
            }

        }
        return returnStatus;
        
        
    }
    
    private static boolean contactExists (String passedSECID ) {
        boolean returnStatus = false;
        
        List<Contact> cnt = [Select Id,Name from Contact where SECID__c =: passedSECID];
        System.debug('300-10->>>>>>>>>>>>ADUpdateGroupService:contactExists:lookin for contact: passedSECID: '+passedSECID+' found: '+cnt.size());
        if (cnt.size() > 0 ) {
            returnStatus = true;
        }
        
        return returnStatus;
    }
    
    private static boolean applicationAccessExists (String passedSECID, Id applicationId, Id applicationLevelId ) {
        boolean returnStatus = false;
        
    	List<CF_Application_Access__c> aa = [Select Id, Name, Approval_Status__c, Application_Name__c, DTC_Application_Level__r.Name, 
                                             Inactive__c, DTC_Application__r.Name, Contact__r.SECID__c FROM CF_Application_Access__c 
                                             where Contact__r.SECID__c =: passedSECID AND Inactive__c = true AND 
                                             DTC_Application__c =: applicationId AND DTC_Application_Level__c =: applicationLevelId];
        System.debug('300-20->>>>>>>>>>>>ADUpdateGroupService:contactExists:lookin for applicationAccess: passedSECID: '+passedSECID+
                     ' application Id: '+applicationId+' application level id: '+applicationLevelId+
                     ' found: '+aa.size());
        if (aa.size() > 0 ) {
            returnStatus = true;
        }
        
        return returnStatus;
    }

    
    private static DTC_Application__c getDTCApplication (String applicationName ) {
        DTC_Application__c returnApplication = new DTC_Application__c();
        
        System.debug('200-10->>>>>>>>>>>>ADUpdateGroupService:getDTCApplication:lookin for applicationName: '+applicationName);
        try {
            returnApplication = [select Id, Name, Account__c, Application_Description__c, Org__c, Profile_ID__c from DTC_Application__c where Name =: applicationName ];
        } catch (Exception e) {
            System.debug('ADUpdateGroupService:getDTCApplication:Exception: '+e.getStackTraceString());
            returnApplication = null;
        }
        System.debug('200-15->>>>>>>>>>>>ADUpdateGroupService:getDTCApplication:found application: '+returnApplication);
        
        return returnApplication;
        
    }
    
    private static DTC_Application_Level__c getDTCApplicationLevel (Id applicationId, String applicationLevelName ) {
        DTC_Application_Level__c returnApplicationLevel = new DTC_Application_Level__c();
        
        System.debug('210-10->>>>>>>>>>>>ADUpdateGroupService:getDTCApplicationLevel:lookin for applicationLevelName: '+applicationLevelName);
        try {
            returnApplicationLevel = [select Id, Name, DTC_Application__c, Is_Active__c from DTC_Application_Level__c 
                                      where Name =: applicationLevelName AND DTC_Application__c =: applicationId];
        } catch (Exception e) {
            System.debug('ADUpdateGroupService:getDTCApplicationLevel:Exception: '+e.getStackTraceString());
            returnApplicationLevel = null;
        }
        System.debug('210-15->>>>>>>>>>>>ADUpdateGroupService:getDTCApplicationLevel:found application Level: '+returnApplicationLevel);
        
        return returnApplicationLevel;
        
    }
     
    private static List<CF_Permission_Mapping__c> getApplicationLevelPermissions (Id applicationId, Id applicationLevelId,String permissionLocation ) {
        List<CF_Permission_Mapping__c> returnApplicationLevelPermissions = new List<CF_Permission_Mapping__c>();
        
        System.debug('220-10->>>>>>>>>>>>ADUpdateGroupService:getApplicationLevelPermissions:lookin for applicationId: '+applicationId+
                     ' applicationLevelId: '+applicationLevelId);
        try {
            returnApplicationLevelPermissions = [select Id, Name, DTC_Application__c , DTC_Application_Level__c  from CF_Permission_Mapping__c 
                                      where DTC_Application_Level__c =: applicationLevelId AND 
                                                 DTC_Application__c =: applicationId AND 
                                                 Permission_Location__c =: permissionLocation];
        } catch (Exception e) {
            System.debug('ADUpdateGroupService:getApplicationLevelPermissions:Exception: '+e.getStackTraceString());
            returnApplicationLevelPermissions = null;
        }
        System.debug('220-15->>>>>>>>>>>>ADUpdateGroupService:getApplicationLevelPermissions:found application Level permissions: '+returnApplicationLevelPermissions);
       
        
        return returnApplicationLevelPermissions;
        
    }

    
}