//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//

public class ADUpdateGroupService {
    
    public String GroupName {get;set;} 
    public String EmailAddress {get;set;} 
    public String FederationId {get;set;} 
    public String SECID {get;set;} 
    public String FirstName {get;set;} 
    public String LastName {get;set;} 
    public String ParentADGroup {get;set;} 
    public String Status {get;set;} 
    
    public ADUpdateGroupService(JSONParser parser) {
        while (parser.nextToken() != System.JSONToken.END_OBJECT) {
            if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                String text = parser.getText();
                if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                    if (text == 'GroupName') {
                        GroupName = parser.getText();
                    } else if (text == 'EmailAddress') {
                        EmailAddress = parser.getText();
                    } else if (text == 'FederationId') {
                        FederationId = parser.getText();
                    } else if (text == 'SECID') {
                        SECID = parser.getText();
                    } else if (text == 'FirstName') {
                        FirstName = parser.getText();
                    } else if (text == 'LastName') {
                        LastName = parser.getText();
                    } else if (text == 'ParentADGroup') {
                        ParentADGroup = parser.getText();
                    } else if (text == 'Status') {
                        Status = parser.getText();
                    } else {
                        System.debug(LoggingLevel.WARN, 'ADUpdateGroupService consuming unrecognized property: '+text);
                        consumeObject(parser);
                    }
                }
            }
        }
    }
    
    
    public static ADUpdateGroupService parse(String json) {
        System.JSONParser parser = System.JSON.createParser(json);
        return new ADUpdateGroupService(parser);
    }
    
    public static void consumeObject(System.JSONParser parser) {
        Integer depth = 0;
        do {
            System.JSONToken curr = parser.getCurrentToken();
            if (curr == System.JSONToken.START_OBJECT || 
                curr == System.JSONToken.START_ARRAY) {
                    depth++;
                } else if (curr == System.JSONToken.END_OBJECT ||
                           curr == System.JSONToken.END_ARRAY) {
                               depth--;
                           }
        } while (depth > 0 && parser.nextToken() != null);
    }
    
    public static String execute (String messageRecived ) {
        ADUpdateGroupService r = ADUpdateGroupService.parse(messageRecived);
        String returnMessage = 'Success';
        
        System.debug('ADUpdateGroupService:GroupName: '+r.GroupName);
        System.debug('ADUpdateGroupService:EmailAddress: '+r.EmailAddress);
        System.debug('ADUpdateGroupService:FederationId: '+r.FederationId);
        System.debug('ADUpdateGroupService:SECID: '+r.SECID);
        System.debug('ADUpdateGroupService:FirstName: '+r.FirstName);
        System.debug('ADUpdateGroupService:LastName: '+r.LastName);
        System.debug('ADUpdateGroupService:ParentADGroup: '+r.ParentADGroup);
        System.debug('ADUpdateGroupService:Status: '+r.Status);
        
        DTC_Application__c dtcApplication = new DTC_Application__c();
        DTC_Application_Level__c dtcApplicationLevel = new DTC_Application_Level__c();
        List<CF_Permission_Mapping__c> dtcApplicationLevelPermissions = new List<CF_Permission_Mapping__c>();

        dtcApplication = getDTCApplication(r.ParentADGroup);
        if ( dtcApplication.Id != null ) {
			dtcApplicationLevel = getDTCApplicationLevel(dtcApplication.Id,r.GroupName);
	        if ( dtcApplicationLevel.Id != null ) {
                dtcApplicationLevelPermissions = getApplicationLevelPermissions(dtcApplication.Id,dtcApplicationLevel.Id,'Destination');
		        if ( dtcApplicationLevelPermissions.size() > 0 ) {
                    createContact(r,dtcApplication,dtcApplicationLevel);
                }
            }
        }
        
        
        return returnMessage;
        
    }
    
    public static void createUser(List<Id> IdsToProcess) {
        
        List<User> newUsers = new List<User>();
        User newUser = new User();
        List<AUP_Destination_User_Event__e> userEvents = new List<AUP_Destination_User_Event__e>();
        AUP_Destination_User_Event__e userEvent = new AUP_Destination_User_Event__e();
        List<String> secIdArr = new List<String>();

        Id hubProfileId = null;// = new Id();
        Id hubRoleId    = null;//new List<String>();
        String hubLicenseId = ''; 
        String destProfile  = '';
        String destRole     = '';
        String destLicense  = ''; 
 
        Boolean bIsActive = true;
        String sLanguagelocalekey='en_US';
        String sTimezonesidkey='America/New_York';
        String sLocalesidkey='en_US';
        String sEmailencodingkey='UTF-8';

        
        Contact cont = new Contact();
        Map<Id,Contact> contactMap = new Map<Id,Contact>();
        DTC_Application__c dtcApp  = new DTC_Application__c();
        Map<String,DTC_Application__c> DTCApplicationMap = new Map<String,DTC_Application__c>();
        DTC_Application_Level__c dtcAppLevel = new DTC_Application_Level__c();
        Map<String,CF_Application_Access__c> accessListMap = new Map<String,CF_Application_Access__c>();
        Map<String,DTC_Application_Level__c> DTCApplicationLevelMap = new Map<String,DTC_Application_Level__c>();
        List<CF_Permission_Mapping__c> permissions = new List<CF_Permission_Mapping__c>();
        Map<String,List<CF_Permission_Mapping__c>> hubPermissionsMap = new Map<String,List<CF_Permission_Mapping__c>>();
        Map<String,List<CF_Permission_Mapping__c>> destPermissionsMap = new Map<String,List<CF_Permission_Mapping__c>>();
        
        
        List<CF_Application_Access__c> appAccessList = [SELECT Id, Account__c, Approval_Status__c, Approved_Checkbox__c, DTC_Application__c, 
                                                    Contact__c, Inactive__c, DTC_Application_Level__c FROM CF_Application_Access__c where Id =: IdsToProcess];
        
        System.debug('600-10->>>>>>>>>>>>ADUpdateGroupService:createUser:records to process: '+appAccessList);
        for (CF_Application_Access__c appAccess : appAccessList ) {

	        System.debug('600-20->>>>>>>>>>>>ADUpdateGroupService:createUser:reading singular record: '+appAccess);
            if (contactMap.isEmpty() || contactMap.get(appAccess.Contact__c) == null ) {
                cont = getContact(appAccess.Contact__c);
                contactMap.put(appAccess.Contact__c,cont); 
            } 
            secIdArr.add(cont.SECID__c);
	        System.debug('600-30->>>>>>>>>>>>ADUpdateGroupService:createUser:updated contactMap: '+contactMap);
            if (accessListMap.isEmpty() || accessListMap.get(cont.SECID__c) == null ) {
                accessListMap.put(cont.SECID__c,appAccess); 
            } 
	        System.debug('600-35->>>>>>>>>>>>ADUpdateGroupService:createUser:updated accessListMap: '+accessListMap);
            //if (DTCApplicationMap.isEmpty() || DTCApplicationMap.get(appAccess.DTC_Application__c) == null ) {
            if (DTCApplicationMap.isEmpty() || DTCApplicationMap.get(cont.SECID__c) == null ) {
                dtcApp = getDTCApplication(appAccess.DTC_Application__c);
		        System.debug('600-35.1->>>>>>>>>>>>ADUpdateGroupService:createUser:returning from getDTCApplication with: '+dtcApp);
                DTCApplicationMap.put(cont.SECID__c,dtcApp); 
            }
	        System.debug('600-40->>>>>>>>>>>>ADUpdateGroupService:createUser:updated DTCApplicationMap: '+DTCApplicationMap);
            //if (DTCApplicationLevelMap.isEmpty() || DTCApplicationLevelMap.get(appAccess.DTC_Application_Level__c) == null ) {
            if (DTCApplicationLevelMap.isEmpty() || DTCApplicationLevelMap.get(cont.SECID__c) == null ) {
                dtcAppLevel = getDTCApplicationLevel(appAccess.DTC_Application_Level__c);
                DTCApplicationLevelMap.put(cont.SECID__c,dtcAppLevel); 
            }
	        System.debug('600-40->>>>>>>>>>>>ADUpdateGroupService:createUser:updated DTCApplicationLevelMap: '+DTCApplicationLevelMap);
            //if (hubPermissionsMap.isEmpty() || hubPermissionsMap.get((appAccess.DTC_Application__c+'|'+appAccess.DTC_Application_Level__c+'|hub')) == null ) {
            if (hubPermissionsMap.isEmpty() || hubPermissionsMap.get((cont.SECID__c+'|hub')) == null ) {
                permissions = getApplicationLevelPermissions(appAccess.DTC_Application__c,appAccess.DTC_Application_Level__c,'Hub');
                if ( permissions.size() > 0 ) {
	                hubPermissionsMap.put((cont.SECID__c+'|hub'),permissions); 
                } else {
			        System.debug('600-45->>>>>>>>>>>>ADUpdateGroupService:createUser:did not find any HUB permissions');
                }
            }
	        System.debug('600-50->>>>>>>>>>>>ADUpdateGroupService:createUser:updated hubPermissionsMap: '+hubPermissionsMap);
            //if (destPermissionsMap.isEmpty() || destPermissionsMap.get((appAccess.DTC_Application__c+'|'+appAccess.DTC_Application_Level__c+'|dest')) == null ) {
            if (destPermissionsMap.isEmpty() || destPermissionsMap.get((cont.SECID__c+'|dest')) == null ) {
                permissions = getApplicationLevelPermissions(appAccess.DTC_Application__c,appAccess.DTC_Application_Level__c,'Destination');
                if ( permissions.size() > 0 ) {
	                destPermissionsMap.put((cont.SECID__c+'|dest'),permissions); 
                } else {
			        System.debug('600-55->>>>>>>>>>>>ADUpdateGroupService:createUser:did not find any Destination permissions');
                }
            }
	        System.debug('600-60->>>>>>>>>>>>ADUpdateGroupService:createUser:updated destPermissionsMap: '+destPermissionsMap);
	        System.debug('600-62->>>>>>>>>>>>ADUpdateGroupService:createUser:looking for HUB profile: '+dtcAppLevel.Hub_Org_Profile__c);
            hubProfileId = [Select Id From Profile Where Name =: dtcAppLevel.Hub_Org_Profile__c limit 1].Id;
	        System.debug('600-64->>>>>>>>>>>>ADUpdateGroupService:createUser:looking for HUB roleId: '+dtcAppLevel.Hub_Org_Role__c);
            if ( dtcAppLevel.Hub_Org_Role__c <> null ) {
	            hubRoleId = [SELECT Id FROM UserRole where DeveloperName =: dtcAppLevel.Hub_Org_Role__c limit 1].Id;
            } else {
                hubRoleId = null;
            }
            hubLicenseId = ''; 
            destProfile  = dtcAppLevel.Destination_Org_Profile__c;
            destRole     = dtcAppLevel.Destination_Org_Role__c;
            destLicense  = dtcAppLevel.Destination_Org_License__c; 

            newUser = new User(username=cont.Email,
                               firstname=cont.FirstName,
                               lastname=cont.LastName,
                               email=cont.Email,
                               SECID__c=cont.SECID__c,
                               federationidentifier=cont.Federation_Id__c,
                               alias=cont.FirstName.substring(0, 2)+cont.LastName.substring(0,3),
                               profileid=hubProfileId,
                               isactive=bIsActive,
                               languagelocalekey=sLanguagelocalekey,timezonesidkey=sTimezonesidkey,localesidkey=sLocalesidkey,emailencodingkey=sEmailencodingkey);
            newUsers.add(newUser);
	        System.debug('600-70->>>>>>>>>>>>ADUpdateGroupService:createUser:Users to be created: '+newUsers);
            //SELECT Id, AD_SEC_ID__c, Email_Address__c, Federation_Id__c, FirstName__c, LastName__c, Profile_Name__c, Role_Name__c, License_Name__c, Username__c, 
            //Alias__c, Permission_Set_Groups__c, Permission_Sets__c, Destination_Org__c, Groups__c, Queues__c, Permission_Set_Licenses__c 
            //FROM AUP_Destination_User_Event__e
            
            userEvent = new AUP_Destination_User_Event__e(AD_SEC_ID__c=cont.SECID__c, 
                                                          Email_Address__c=cont.Email, 
                                                          Federation_Id__c=cont.Federation_Id__c, 
                                                          FirstName__c=cont.FirstName, 
                                                          LastName__c=cont.LastName, 
                                                          Profile_Name__c=dtcAppLevel.Destination_Org_Profile__c, 
                                                          Role_Name__c=dtcAppLevel.Destination_Org_Role__c, 
                                                          License_Name__c=dtcAppLevel.Destination_Org_License__c, 
                                                          Username__c=cont.Email, 
                                                          Alias__c=cont.FirstName.substring(0, 2)+cont.LastName.substring(0,3), 
                                                          Permission_Set_Groups__c=appendString('Destination','Permission Set Groups',
                                                                                                destPermissionsMap.get((cont.SECID__c+'|dest'))), 
                                                          Permission_Sets__c=appendString('Destination','Permission Sets',
                                                                                          destPermissionsMap.get((cont.SECID__c+'|dest'))), 
                                                          Destination_Org__c=dtcApp.Org__c, 
                                                          Groups__c=appendString('Destination','Groups',
                                                                                 destPermissionsMap.get((cont.SECID__c+'|dest'))), 
                                                          Queues__c=appendString('Destination','Queues',
                                                                                 destPermissionsMap.get((cont.SECID__c+'|dest'))), 
                                                          Permission_Set_Licenses__c=appendString('Destination','Permission Set Licenses',
                                                                                                  destPermissionsMap.get((cont.SECID__c+'|dest')))
                                                         );
            userEvents.add(userEvent);
	        System.debug('600-80->>>>>>>>>>>>ADUpdateGroupService:createUser:UserEvents to be published: '+userEvents);

            
        }
        
        System.debug('600-90->>>>>>>>>>>>ADUpdateGroupService:createUser:returning from publishing events: '+
                     publishUserEvents (userEvents ));
        
        Map<String,Id> existingUsers = getExistingUsers(secIdArr);
        List<User>     usersToAdd    = new List<User>();
        
        for (User usr : usersToAdd) {
            if (existingUsers.isEmpty() || existingUsers.get(usr.SECID__c) == null ) {
                usersToAdd.add(usr);
            } 
        }
        
        //insert usersToAdd;
            //addPermissionSetGroups(usr.Id,hubPermissionsMap.get('000009|hub'));
        
        //Lets get all the users we added as well as the users that already existed
        //List<User> listOfUsers = [Select SECID__c,Id from User where SECID__c =: secIdArr];
        List<User> listOfUsers = [Select SECID__c,Id from User where SECID__c =: '000001'];
        for ( User usr : listOfUsers ) {
        
            //1. Read the user
            //2. Find the 'hub' permission set groups using the SECID
            //3. Find the 'hub' permission sets using the SECID
            //4. Find the 'hub' groups using the SECID 
            //5. Find the 'hub' queues using the SECID 
            //
            //now we loop through each of the users and add 'Permissions'
            //List<CF_Permission_Mapping__c> permissionsRecord = destPermissionsMap.get(usr.SECID__c+'|hub');
            List<CF_Permission_Mapping__c> permissionsRecord = destPermissionsMap.get('000009|hub');
            
            //Add permission Permission Set Groups
            //addPermissionSetGroups(usr.Id,hubPermissionsMap.get((usr.SECID__c+'|hub')));
            addPermissionSetGroups(usr.Id,hubPermissionsMap.get('000009|hub'));
            
            //Add permission sets
            addPermissionSets(usr.Id,hubPermissionsMap.get('000009|hub'));
            
            //Add Permission Set Licenses
            
            
            //Add Groups
            
            
            //Add Queues
            
            /*
            */                                        
        }
            
                                                     
			/* create user:

                newUsers.add(new User(username=appAccess.Federation_Id__c,firstname=appAccess.Contact__r.FirstName,lastname=Contact__r.LastName,email=Contact__r.Email,federationidentifier=Contact__r.LastName,
                alias=users.get(5),isactive=bIsActive,profileid=adminProfile.Id,languagelocalekey=sLanguagelocalekey,timezonesidkey=sTimezonesidkey,localesidkey=sLocalesidkey,emailencodingkey=sEmailencodingkey);

				userValues.add(new List<String>{'arevankar@mulesoft.com ','Amit',' Revankar','arevankar@mulesoft.com','arevankar@mulesoft.com','arev','true','00et0000000QGuGAAW','en_US','America/New_York','en_US','UTF-8'});
                userValues.add(new List<String>{'afelrice@salesforce.com','Andrew','Felrice','afelrice@salesforce.com','afelrice@salesforce.com','afeir','true','00et0000000QGuGAAW','en_US','America/New_York','en_US','UTF-8'});
                userValues.add(new List<String>{'bryan.broome@va.gov','Bryan','Broome','bryan.broome@va.gov','bryan.broome@va.gov','bbro','true','00et0000000QGuGAAW','en_US','America/New_York','en_US','UTF-8},'});
                userValues.add(new List<String>{'wsteele@salesforce.com','William','Steele','wsteele@salesforce.com','wsteele@salesforce.com','wstee','true','00et0000000QGuGAAW','en_US','America/New_York','en_US','UTF-8'});
                
                Integer cnt = 0;
                for ( List<String> users : userValues) {
                    System.debug('======================================================================');
                    //newUsers.add(new User(username=users.get(0),firstname=users.get(1),lastname=users.get(2),email=users.get(3),federationidentifier=users.get(4),alias=users.get(5),isactive=Boolean.valueOf(users.get(6)),profileid=adminProfile.Id,languagelocalekey=users.get(8),timezonesidkey=users.get(9),localesidkey=users.get(10),emailencodingkey='UTF-8'));
                    newUsers.add(new User(username=users.get(0),firstname=users.get(1),lastname=users.get(2),email=users.get(3),federationidentifier=users.get(4),alias=users.get(5),isactive=bIsActive,profileid=adminProfile.Id,languagelocalekey=sLanguagelocalekey,timezonesidkey=sTimezonesidkey,localesidkey=sLocalesidkey,emailencodingkey=sEmailencodingkey);
                }
                System.debug('======================================================================');
                System.debug('users to be added: '+newUsers);
                Insert newUsers;
			 */

        
    }
    
    private static void addPermissionSets (Id usrId,List<CF_Permission_Mapping__c> hubPermissions ) {
        
        String debugSection = '660';
        System.debug(debugSection+'-00->>>>>>>>>>>>ADUpdateGroupService:addPermissionSets:inside:permission sets for user('+usrId+'): '+hubPermissions);
        List<String> existingPs = new List<String>();
        //Get the api names for all permission sets to be assigned
        for ( CF_Permission_Mapping__c psm : hubPermissions ) {
	        System.debug(debugSection+'-02->>>>>>>>>>>>ADUpdateGroupService:addPermissionSets:access type: '+psm.Access_Type__c+' api name: '+psm.Permission_Set_API_Name__c);
            if ( psm.Access_Type__c.equals('Permission Sets')) {
		        //System.debug(debugSection+'-04->>>>>>>>>>>>ADUpdateGroupService:addPermissionSets:FOUND access type: '+psm.Access_Type__c+' api name: '+psm.Permission_Set_API_Name__c);
                existingPs.add(psm.Permission_Set_API_Name__c);
            }
        }        
        System.debug(debugSection+'-10->>>>>>>>>>>>ADUpdateGroupService:addPermiaddPermissionSetsssionSetGroups:permission sets for user('+usrId+'): '+existingPs);
        //Take the names and query the actual permission set group object to get the Ids
        List<PermissionSet> psList = [SELECT Id, Name, Label, LicenseId, ProfileId, IsCustom, Description, Type, PermissionSetGroupId, NamespacePrefix 
                                       FROM PermissionSet where Name =: existingPs];
        Map<Id,PermissionSet> psMap = new Map<Id,PermissionSet>();
        //List<PermissionSet> newPs = 
        System.debug(debugSection+'-12->>>>>>>>>>>>ADUpdateGroupService:addPermissionSets:looking for permission sets based on the api names: '+psList);
        for (PermissionSet ps: psList) {
            psMap.put(ps.Id,ps);                               
		}
        System.debug(debugSection+'-20->>>>>>>>>>>>ADUpdateGroupService:addPermissionSets:permission sets to be added: '+psMap);        
        
        //now, loop through the existing assignments for this user and save off the ones that don't already exist
        List<PermissionSetAssignment> newAssignments = new List<PermissionSetAssignment>();
        List<PermissionSetAssignment> existingAssignments = [SELECT Id, PermissionSetId, AssigneeId FROM PermissionSetAssignment where AssigneeId =: usrId];
        System.debug(debugSection+'-22->>>>>>>>>>>>ADUpdateGroupService:addPermissionSets:existing assignments: '+existingAssignments);        
        for (PermissionSetAssignment psa  : existingAssignments ) {
            if (psMap.isEmpty() || psMap.get(psa.PermissionSetId) == null ) {
                if ( psa.PermissionSetId != null ) {
                    System.debug(debugSection+'-23->>>>>>>>>>>>ADUpdateGroupService:addPermissionSets:extracting existing assignments: '+psa);        
                    newAssignments.add(new PermissionSetAssignment(PermissionSetId = psa.PermissionSetId,AssigneeId = usrId)); 
                }
            }
		}
        //There weren't any existing assignments, so we'll add all the new ones
        if ( newAssignments.size() <= 0 ) {
            for (PermissionSet ps2: psList) {
		        System.debug(debugSection+'-24->>>>>>>>>>>>ADUpdateGroupService:addPermissionSets:looping through PSGs: '+ps2);        
	            newAssignments.add(new PermissionSetAssignment(PermissionSetId = ps2.Id,AssigneeId = usrId)); 
            }
        }
        System.debug(debugSection+'-30->>>>>>>>>>>>ADUpdateGroupService:addPermissionSets:permission set group assignments to be added: '+newAssignments);
        
       //now we know the ones that need to be added, lets load up the object and insert them
       //insert newAssignments;
       /*
        PermissionSetAssignment assignment = new PermissionSetAssignment(
            PermissionSetGroupId = groupId,
            AssigneeId = userId);
    
	    insert assignment;
		*/
    }
    
    private static void addPermissionSetGroups (Id usrId,List<CF_Permission_Mapping__c> hubPermissions ) {
        
        String debugSection = '650';
        System.debug(debugSection+'-00->>>>>>>>>>>>ADUpdateGroupService:addPermissionSetGroups:inside:permission set groups for user('+usrId+'): '+hubPermissions);
        List<String> existingPsgs = new List<String>();
        //Get the api names for all permission set groups to be assigned
        for ( CF_Permission_Mapping__c psm : hubPermissions ) {
	        System.debug(debugSection+'-02->>>>>>>>>>>>ADUpdateGroupService:addPermissionSetGroups:access type: '+psm.Access_Type__c+' api name: '+psm.Permission_Set_API_Name__c);
            if ( psm.Access_Type__c.equals('Permission Set Groups')) {
		        //System.debug(debugSection+'-04->>>>>>>>>>>>ADUpdateGroupService:addPermissionSetGroups:FOUND access type: '+psm.Access_Type__c+' api name: '+psm.Permission_Set_API_Name__c);
                existingPsgs.add(psm.Permission_Set_API_Name__c);
            }
        }        
        System.debug(debugSection+'-10->>>>>>>>>>>>ADUpdateGroupService:addPermissionSetGroups:permission set groups for user('+usrId+'): '+existingPsgs);
        //Take the names and query the actual permission set group object to get the Ids
        List<PermissionSetGroup> psgList = [SELECT Id, IsDeleted, DeveloperName, Language, MasterLabel, NamespacePrefix, Description, Status 
                                       FROM PermissionSetGroup where DeveloperName =: existingPsgs];
        Map<Id,PermissionSetGroup> psgMap = new Map<Id,PermissionSetGroup>();
        //List<PermissionSetGroup> newPsgs = 
        System.debug(debugSection+'-12->>>>>>>>>>>>ADUpdateGroupService:addPermissionSetGroups:looking for permission set groups based on the api names: '+psgList);
        for (PermissionSetGroup psg: psgList) {
            psgMap.put(psg.Id,psg);                               
		}
        System.debug(debugSection+'-20->>>>>>>>>>>>ADUpdateGroupService:addPermissionSetGroups:permission set groups to be added: '+psgMap);        
        
        //now, loop through the existing assignments for this user and save off the ones that don't already exist
        List<PermissionSetAssignment> newAssignments = new List<PermissionSetAssignment>();
        List<PermissionSetAssignment> existingAssignments = [SELECT Id, PermissionSetId, PermissionSetGroupId, AssigneeId FROM PermissionSetAssignment where AssigneeId =: usrId];
        System.debug(debugSection+'-22->>>>>>>>>>>>ADUpdateGroupService:addPermissionSetGroups:existing assignments: '+existingAssignments);        
        for (PermissionSetAssignment psa  : existingAssignments ) {
            if (psgMap.isEmpty() || psgMap.get(psa.PermissionSetGroupId) == null ) {
                if ( psa.PermissionSetGroupId != null ) {
                    System.debug(debugSection+'-23->>>>>>>>>>>>ADUpdateGroupService:addPermissionSetGroups:extracting existing assignments: '+psa);        
                    newAssignments.add(new PermissionSetAssignment(PermissionSetGroupId = psa.PermissionSetGroupId,AssigneeId = usrId)); 
                }
            }
		}
        //There weren't any existing assignments, so we'll add all the new ones
        if ( newAssignments.size() <= 0 ) {
            for (PermissionSetGroup psg2: psgList) {
		        System.debug(debugSection+'-24->>>>>>>>>>>>ADUpdateGroupService:addPermissionSetGroups:looping through PSGs: '+psg2);        
	            newAssignments.add(new PermissionSetAssignment(PermissionSetGroupId = psg2.Id,AssigneeId = usrId)); 
            }
        }
        System.debug(debugSection+'-30->>>>>>>>>>>>ADUpdateGroupService:addPermissionSetGroups:permission set group assignments to be added: '+newAssignments);
        
       //now we know the ones that need to be added, lets load up the object and insert them
       //insert newAssignments;
       /*
        PermissionSetAssignment assignment = new PermissionSetAssignment(
            PermissionSetGroupId = groupId,
            AssigneeId = userId);
    
	    insert assignment;
		*/
    }
    
    private static boolean publishUserEvents (List<AUP_Destination_User_Event__e> userEvents ) {
        boolean returnStatus = false;
   
        System.debug('700.10-##############ADUpdateGroupService:publishUserEvents:Ready to published events: '+userEvents);
        if ( userEvents.size() > 0 ) {
            // Call method to publish events
            List<Database.SaveResult> srs = EventBus.publish(userEvents);
            // Inspect publishing result
            for (Database.SaveResult sr: srs ) {
                if (sr.isSuccess()) {
                    System.debug('700.20-##############ADUpdateGroupService:publishUserEvents:Successfully published event: '+sr);
                    returnStatus = true;
                } else {
                    for(Database.Error err : sr.getErrors()) {
                        System.debug('Error returned: ' +
                                     err.getStatusCode() +
                                     ' - ' +
                                     err.getMessage());
                    }
                }
            }
            System.debug('700.30-##############ADUpdateGroupService:publishUserEvents:FINISHING UP!');
        }

        
        return returnStatus;
    }

    private static String appendString(String location, String type, List<CF_Permission_Mapping__c> permissions) {
        String returnString = '';
        
        try {
            for ( CF_Permission_Mapping__c perm : permissions ) {
                if ( perm.Permission_Location__c.equals(location) && perm.Access_Type__c.equals(type) ) {
                        returnString += perm.Name + '|';
                }
            }        
        } catch (Exception e) {
            System.debug('Exception while tring to append: '+permissions+' to '+returnString+' => '+e.getStackTraceString());
            //rtnDTCApplicationLevel = null;
        }
        return returnString;
    }    
    
    private static Map<String,Id> getExistingUsers ( List<String> secIdArr ) {
        
        Map<String,Id> existingUserMap = new Map<String,Id>();
        for ( User usr : [Select SECID__c,Id from User where SECID__c =: secIdArr]) {
            existingUserMap.put(usr.SECID__c,usr.Id);
        }
        
            /*
               return new User(
                        Alias = 'instMgr',
                        Email = (firstName + lastName + '@example.com').remove(' '),
                        EmailEncodingKey = 'UTF-8',
                        FederationIdentifier = generateRandomStringByLength(15),
                        FirstName = firstName,
                        LastName = lastName,
                        LanguageLocaleKey = 'en_US',
                        LocaleSidKey = 'en_US',
                        ProfileId = testProfile.Id,
                        TimeZoneSidKey = 'GMT',
                        UserName = (firstName + lastName + '@testorg.com' + UserInfo.getOrganizationId()+String.valueOf(Datetime.now()).replace(' ','').replace(':','').replace('-','')).remove(' ')
            if (existingUserMap.isEmpty() || existingUserMap.get(cont.SECID__c) == null ) {
            } 
	        }
			*/
        System.debug('600-70->>>>>>>>>>>>ADUpdateGroupService:createUser:existing Users: '+existingUserMap);
        //insert returnUsers;
        
        return existingUserMap;
    }
     
    private static DTC_Application_Level__c getDTCApplicationLevel (Id DTCApplicationLevelId) {
        DTC_Application_Level__c rtnDTCApplicationLevel = new DTC_Application_Level__c();
        try {
            rtnDTCApplicationLevel = [select Id,Name,Is_Active__c,
                                      Hub_Org_Role__c,Hub_Org_Profile__c,Hub_Org_License__c,
                                      Destination_Org_Role__c,Destination_Org_Profile__c,Destination_Org_License__c,
                                      Application_Level_User_Creation_Flow__c,Application_Level_User_Creation_Apex__c 
                                      FROM DTC_Application_Level__c where Id =: DTCApplicationLevelId];
        }
        catch (Exception e) {
            System.debug('Exception while looking for DTC Application: '+DTCApplicationLevelId+': '+e.getStackTraceString());
            rtnDTCApplicationLevel = null;
        }
        return rtnDTCApplicationLevel;
    }
   
    private static DTC_Application__c getDTCApplication (Id DTCApplicationId) {
        DTC_Application__c rtnDTCApplication = new DTC_Application__c();
        try {
            rtnDTCApplication = [select Id,Name,Application_Description__c,Org__c,Profile_ID__c, 
                                 Overall_User_Creation_Flow__c,Overall_User_Creation_Apex__c  
                                 FROM DTC_Application__c where Id =: DTCApplicationId];
        }
        catch (Exception e) {
            System.debug('Exception while looking for DTC Application: '+DTCApplicationId+': '+e.getStackTraceString());
            rtnDTCApplication = null;
        }
        return rtnDTCApplication;
    }
    
    private static Contact getContact (Id contactId) {
        Contact rtnContact = new Contact();
        try {
            rtnContact = [select Id,FirstName,LastName,Email,Federation_Id__c,SECID__c FROM Contact where Id =: contactId];
        }
        catch (Exception e) {
            System.debug('Exception while looking for contact: '+contactId+': '+e.getStackTraceString());
            rtnContact = null;
        }
        return rtnContact;
    }
    
    private static boolean createContact (ADUpdateGroupService grpEvent, DTC_Application__c dtcApplication, DTC_Application_Level__c dtcApplicationLevel) {
        
        boolean returnStatus = false;
        
        if ( !contactExists(grpEvent.SECID) && !applicationAccessExists(grpEvent.SECID,dtcApplication.Id,dtcApplicationLevel.Id) ) {

            /*
                System.debug('ADUpdateGroupService:GroupName: '+r.GroupName);
                System.debug('ADUpdateGroupService:EmailAddress: '+r.EmailAddress);
                System.debug('ADUpdateGroupService:FederationId: '+r.FederationId);
                System.debug('ADUpdateGroupService:SECID: '+r.SECID);
                System.debug('ADUpdateGroupService:FirstName: '+r.FirstName);
                System.debug('ADUpdateGroupService:LastName: '+r.LastName);
                System.debug('ADUpdateGroupService:ParentADGroup: '+r.ParentADGroup);
                System.debug('ADUpdateGroupService:Status: '+r.Status);
             */            
            try {
                Contact newContact = new Contact(AccountId=dtcApplication.Account__c,
                                                 Email=grpEvent.EmailAddress,Federation_Id__c=grpEvent.FederationId,SECID__c=grpEvent.SECID,
                                                 FirstName=grpEvent.FirstName,LastName=grpEvent.LastName,
                                                 Description='AUP Created Contact');
                insert newContact;
		        System.debug('400-10->>>>>>>>>>>>ADUpdateGroupService:contactExists:createContact: newContact: '+newContact);
                
                CF_Application_Access__c newAccess = new CF_Application_Access__c(Account__c=newContact.AccountId,
                                                                                  Approval_Status__c='Approved',Approved_Checkbox__c=true,
                                                                                  Contact__c=newContact.Id,
                                                                                  DTC_Application__c=dtcApplication.Id,DTC_Application_Level__c=dtcApplicationLevel.Id,
                                                                                  Email_Id__c=grpEvent.EmailAddress,Federation_Id__c=grpEvent.FederationId,Inactive__c=false,
                                                                                  First_Name__c=grpEvent.FirstName,Last_Name__c=grpEvent.LastName,
                                                                                  Notes__c='AUP Created Application Access');
                insert newAccess;
		        System.debug('400-20->>>>>>>>>>>>ADUpdateGroupService:contactExists:create Application Access: newAccess: '+newAccess);
                
                returnStatus = true;
                            
            }
            catch (Exception e) {
                System.debug('Exception(creating new contact and new Application Access record): '+e.getStackTraceString());
            }

        }
        return returnStatus;
        
        
    }
    
    private static boolean contactExists (String passedSECID ) {
        boolean returnStatus = false;
        
        List<Contact> cnt = [Select Id,Name from Contact where SECID__c =: passedSECID];
        System.debug('300-10->>>>>>>>>>>>ADUpdateGroupService:contactExists:lookin for contact: passedSECID: '+passedSECID+' found: '+cnt.size());
        if (cnt.size() > 0 ) {
            returnStatus = true;
        }
        
        return returnStatus;
    }
    
    private static boolean applicationAccessExists (String passedSECID, Id applicationId, Id applicationLevelId ) {
        boolean returnStatus = false;
        
    	List<CF_Application_Access__c> aa = [Select Id, Name, Approval_Status__c, Application_Name__c, DTC_Application_Level__r.Name, 
                                             Inactive__c, DTC_Application__r.Name, Contact__r.SECID__c FROM CF_Application_Access__c 
                                             where Contact__r.SECID__c =: passedSECID AND Inactive__c = true AND 
                                             DTC_Application__c =: applicationId AND DTC_Application_Level__c =: applicationLevelId];
        System.debug('300-20->>>>>>>>>>>>ADUpdateGroupService:contactExists:lookin for applicationAccess: passedSECID: '+passedSECID+
                     ' application Id: '+applicationId+' application level id: '+applicationLevelId+
                     ' found: '+aa.size());
        if (aa.size() > 0 ) {
            returnStatus = true;
        }
        
        return returnStatus;
    }

    
    private static DTC_Application__c getDTCApplication (String applicationName ) {
        DTC_Application__c returnApplication = new DTC_Application__c();
        
        System.debug('200-10->>>>>>>>>>>>ADUpdateGroupService:getDTCApplication:lookin for applicationName: '+applicationName);
        try {
            returnApplication = [select Id, Name, Account__c, Application_Description__c, Org__c, Profile_ID__c from DTC_Application__c where Name =: applicationName ];
        } catch (Exception e) {
            System.debug('ADUpdateGroupService:getDTCApplication:Exception: '+e.getStackTraceString());
            returnApplication = null;
        }
        System.debug('200-15->>>>>>>>>>>>ADUpdateGroupService:getDTCApplication:found application: '+returnApplication);
        
        return returnApplication;
        
    }
    
    private static DTC_Application_Level__c getDTCApplicationLevel (Id applicationId, String applicationLevelName ) {
        DTC_Application_Level__c returnApplicationLevel = new DTC_Application_Level__c();
        
        System.debug('210-10->>>>>>>>>>>>ADUpdateGroupService:getDTCApplicationLevel:lookin for applicationLevelName: '+applicationLevelName);
        try {
            returnApplicationLevel = [select Id, Name, DTC_Application__c, Is_Active__c from DTC_Application_Level__c 
                                      where Name =: applicationLevelName AND DTC_Application__c =: applicationId];
        } catch (Exception e) {
            System.debug('ADUpdateGroupService:getDTCApplicationLevel:Exception: '+e.getStackTraceString());
            returnApplicationLevel = null;
        }
        System.debug('210-15->>>>>>>>>>>>ADUpdateGroupService:getDTCApplicationLevel:found application Level: '+returnApplicationLevel);
        
        return returnApplicationLevel;
        
    }
     
    private static List<CF_Permission_Mapping__c> getApplicationLevelPermissions (Id applicationId, Id applicationLevelId,String permissionLocation ) {
        List<CF_Permission_Mapping__c> returnApplicationLevelPermissions = new List<CF_Permission_Mapping__c>();
        
        System.debug('220-10->>>>>>>>>>>>ADUpdateGroupService:getApplicationLevelPermissions:lookin for applicationId: '+applicationId+
                     ' applicationLevelId: '+applicationLevelId);
        try {
            returnApplicationLevelPermissions = [select Id, Name, DTC_Application__c , DTC_Application_Level__c, Access_Type__c, Permission_Location__c, Permission_Set_API_Name__c     
                                                 from CF_Permission_Mapping__c 
                                      where DTC_Application_Level__c =: applicationLevelId AND 
                                                 DTC_Application__c =: applicationId AND 
                                                 Permission_Location__c =: permissionLocation];
        } catch (Exception e) {
            System.debug('ADUpdateGroupService:getApplicationLevelPermissions:Exception: '+e.getStackTraceString());
            returnApplicationLevelPermissions = null;
        }
        System.debug('220-15->>>>>>>>>>>>ADUpdateGroupService:getApplicationLevelPermissions:found application Level permissions: '+returnApplicationLevelPermissions);
       
        
        return returnApplicationLevelPermissions;
        
    }

    
}