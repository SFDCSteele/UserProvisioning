//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//

public class ADUpdateUserService {

	public String SECID {get;set;} 
	public String FederationId {get;set;} 
	public String Status {get;set;} 

	public ADUpdateUserService(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'FederationId') {
						FederationId = parser.getText();
					} else if (text == 'SECID') {
						SECID = parser.getText();
					} else if (text == 'Status') {
						Status = parser.getText();
					} else {
						System.debug(LoggingLevel.WARN, 'ADUpdateUserService consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	
	public static ADUpdateUserService parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new ADUpdateUserService(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	
    public static String execute (String messageRecived ) {
        String debugSection = '600';
        String debugMethod  = 'execute';

        List<AUP_Destination_User_Event__e> userEvents = new List<AUP_Destination_User_Event__e>();
        AUP_Destination_User_Event__e userEvent = new AUP_Destination_User_Event__e();
        ADUpdateUserService r = ADUpdateUserService.parse(messageRecived);
	    String returnMessage = 'Success';

        System.debug('ADUserReceiveEvent:SECID: '+r.SECID);
        System.debug('ADUserReceiveEvent:FederationId: '+r.FederationId);
        System.debug('ADUserReceiveEvent:Status: '+r.Status);
        
        if ( r.Status.equals('Inactive')) {
            returnMessage += inactivateUser(r.SECID);
            userEvent = new AUP_Destination_User_Event__e(AD_SEC_ID__c=r.SECID, 
                                                          Federation_Id__c=r.FederationId, 
                                                          Destination_Org__c='VAEMPL', 
                                                          Status__c=r.Status
                                                         );
            userEvents.add(userEvent);
        }
        returnMessage += ADUpdateGroupService.publishUserEvents (userEvents );
        ADUpdateGroupService.printDebug (debugMethod,debugSection,'-90:returning from publishing events: '+
                     returnMessage);
        
        return returnMessage;
        
    }

    private static String inactivateUser (String SECID) {
        
	    String returnMessage = ':';
        System.debug('ADUserReceiveEvent:looking for SECID: '+SECID);
		List<User> inActivateUsers = new List<User>();
        List<Id>   usrIds          = new List<Id>();
        Profile newProfile = [Select Id,UserLicenseId From Profile Where Name = 'Force.com - Free User' limit 1];

        for (User usr : [select Id, username, SECID__C,IsActive,profileid from User where SECID__c =: SECID]) {
            usr.IsActive = false;
            usr.UserPermissionsSFContentUser = false;
            usr.profileid = newProfile.Id;
            inActivateUsers.add(usr);
            usrIds.add(usr.Id);
            returnMessage += 'User Inactivated('+usr.SECID__c+')';
        }
        System.debug('ADUserReceiveEvent:preparing to update users: '+inActivateUsers);
        
        try {
            returnMessage += removePermissionSets(usrIds);
            returnMessage += removeGroupsAndQueues(usrIds);
            returnMessage += removePermissionSetLicenses(usrIds);
	        update inActivateUsers;
            returnMessage += '#Overall status: Successful#';
        } catch (Exception e) {
            System.debug('ADUserReceiveEvent:inactivateUser:Exception: '+e.getStackTraceString());
            //return e.getStackTraceString();
            returnMessage += '#Overall status: exception #: '+e.getStackTraceString();
        }
        return returnMessage;
    }
    
    private static String removePermissionSets (List<Id> usrIds ) {
	    String returnMessage = ':';
        List<PermissionSetAssignment> delAssignments = new List<PermissionSetAssignment>();
        for ( PermissionSetAssignment dassgn :  [SELECT Id, PermissionSetId, AssigneeId FROM PermissionSetAssignment 
                                                 where AssigneeId =: usrIds AND PermissionSet.Type != 'Profile' AND PermissionSet.IsOwnedByProfile = false]) {
            delAssignments.add(dassgn);
        }
        try {
	        delete delAssignments;
            returnMessage = 'permissionSetsRemoved@';
        } catch (Exception e) {
            System.debug('ADUpdateUserService:removePermissionSets:Exception: '+e.getStackTraceString());
            returnMessage = 'permissionSets exception@d: '+e.getStackTraceString();
        }
        return returnMessage;
        
    }
    
    private static String removePermissionSetLicenses (List<Id> usrIds ) {
	    String returnMessage = ':';
        List<PermissionSetLicenseAssign> delAssignments = new List<PermissionSetLicenseAssign>();
        for ( PermissionSetLicenseAssign dassgn :  [SELECT Id, PermissionSetLicenseId, AssigneeId FROM PermissionSetLicenseAssign where AssigneeId =: usrIds]) {
            delAssignments.add(dassgn);
        }
        try {
	        delete delAssignments;
            returnMessage = 'permissionSetsRemoved@';
        } catch (Exception e) {
            System.debug('ADUpdateUserService:removePermissionSetLicenses:Exception: '+e.getStackTraceString());
            returnMessage = 'permissionSetsLicenses exception@d: '+e.getStackTraceString();
        }
        return returnMessage;
        
    }
   
    private static String removeGroupsAndQueues (List<Id> usrIds ) {
	    String returnMessage = ':';
        List<GroupMember> delAssignments = new List<GroupMember>();
        for ( GroupMember dassgn :  [SELECT Id, GroupId, UserOrGroupId FROM GroupMember where UserOrGroupId =: usrIds]) {
            delAssignments.add(dassgn);
        }
        try {
	        delete delAssignments;
            returnMessage = 'permissionSetsRemoved@';
        } catch (Exception e) {
            System.debug('ADUpdateUserService:removeGroupsAndQueues:Exception: '+e.getStackTraceString());
            returnMessage = 'Groups&Queues exception@d: '+e.getStackTraceString();
        }
        return returnMessage;
        
    }

}